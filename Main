常用数据结构：
1.数组
2.链表
3.栈
4.队列
5.散列表
6.二叉树
7.堆
8.跳表
9.图
10.Trie树

常用算法：
1.递归
2.排序
3.二分查找
4.搜索
5.哈希算法
6.贪心算法
7.分治算法
8.回溯算法
9.动态规划
10.字符串匹配算法

时间复杂度示例1：

1 int cal(int n) {
2   int sum = 0;
3   int i = 1;
4   for (; i <= n; ++i) {
5     sum = sum + i;
6   }
7   return sum;
8 }

 //假设每行代码都执行了unit_time
 //2、3行代码分别需要1个unit_time
 //第4、5行都运行了遍所以需要的时间是 (2n+2)*unit_time
 //所有代码的执行时间 T(n) 与每行代码的执行次数成正比。

时间复杂度示例2：

1 int cal(int n) {
2   int sum = 0;
3   int i = 1;
4   int j = 1;
5   for (; i <= n; ++i) {
6     j = 1;
7     for (; j <= n; ++j) {
8       sum = sum +  i * j;
9     }
10   }
11 }

 //第2、3、4都需要1个unit_time
 //第5、6行代码都执行了n遍，都需要2n个unit_time
 //第7、8行代码都执行了n²遍，所需要2n² * unit_time的执行时间
 //整段代码的执行时间T(n) = (2n²+2n+3)*unit_time


 //结论：所有代码执行的时间T(n) 与每段代码的执行次数f(n)成正比
 //最后把这个规律总结成一个公式：T(n) = O(f(n))
 //所以，第一个例子中的 T(n) = O(2n+2)，第二个例子中的 T(n) = O(2n2+2n+3)。这就是大 O 时间复杂度表示法。
 //大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，所以，也叫作渐进时间复杂度（asymptotic time complexity），简称时间复杂度。